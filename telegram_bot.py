import json
import telebot
import requests
from monoapi import cr
import os


class Keep:
    def __init__(self,filename='requests.json', words=10):
        self.filename=filename
        self.max_words = words
        self.history = self.load()

    def load(self):
        if os.path.exists(self.filename):
            with open('filename.txt', 'r') as file:
                return json.load(file)

    def save_history(self):
        with open(self.filename, 'w'):
            json.dumps(self.history)

    def work(self, q):
        if len(self.history) >= self.max_words:
            self.history.pop(0)
        self.history.append(q)
        self.save_history()
        return self.history

TOKEN = '7674249727:AAFlBxKs0mLKXa3CePwVHryck6Qq-UAuwLs'
bot = telebot.TeleBot(TOKEN)
money = 0


def convert_uah_to(currency, amount):
    url = 'https://api.privatbank.ua/p24api/pubinfo?exchange&json&coursid=5'
    response = requests.get(url)
    data = response.json()

    for item in data:
        if item["ccy"] == currency:
            rate = float(item['buy'])
            return round(amount / rate, 2)
    return None


@bot.message_handler(commands=['start'])
def start(message: telebot.types.Message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = telebot.types.KeyboardButton('üìÉ-> –ö—É—Ä—Å –í–∞–ª—é—Ç')
    button2 = telebot.types.KeyboardButton('üì®-> –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤–∞–ª—é—Ç')
    markup.add(button1, button2)
    bot.send_message(
        message.chat.id,
        '–í—ñ—Ç–∞—é —Ç–µ–±–µ! –Ø –±–æ—Ç, —è–∫–∏–π –≤—ñ–¥—Å—Ç–µ–∂—É—î –∫—É—Ä—Å –≤–∞–ª—é—Ç –∑–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ –£–∫—Ä–∞—ó–Ω–∏. '
        '–í—ñ–¥ –º–µ–Ω–µ –≤–∏ –∑–∞–≤–∂–¥–∏ –∑–º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —â–æ–¥–æ –∫—É—Ä—Å—ñ–≤ –æ—Å–Ω–æ–≤–Ω–∏—Ö –≤–∞–ª—é—Ç, '
        '–∞ —Ç–∞–∫–æ–∂ –≤–∏–∫–æ–Ω–∞—Ç–∏ —à–≤–∏–¥–∫—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é –≥—Ä–∏–≤–Ω—ñ –≤ —ñ–Ω—à—É –≤–∞–ª—é—Ç—É.',
        reply_markup=markup
    )


@bot.message_handler(func=lambda message: message.text in ['üìÉ-> –ö—É—Ä—Å –í–∞–ª—é—Ç', 'üì®-> –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤–∞–ª—é—Ç'])
def handle_menu(message):
    if message.text == 'üìÉ-> –ö—É—Ä—Å –í–∞–ª—é—Ç':
        bot.send_message(message.chat.id, cr())
    elif message.text == 'üì®-> –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤–∞–ª—é—Ç':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:')
        bot.register_next_step_handler(message, get_money)


def get_money(message: telebot.types.Message):
    global money
    try:
        money = float(message.text.strip())
    except ValueError:
        bot.send_message(message.chat.id, '<b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</b>', parse_mode='HTML')
        bot.register_next_step_handler(message, get_money)
        return

    if money >= 0:
        inlinemarkup = telebot.types.InlineKeyboardMarkup(row_width=2)
        bt1 = telebot.types.InlineKeyboardButton('üíµ USD', callback_data='USD')
        bt2 = telebot.types.InlineKeyboardButton('üí∂ EUR', callback_data='EUR')
        inlinemarkup.add(bt1, bt2)
        bot.send_message(message.chat.id, '<u>–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó:</u>ü™ô', reply_markup=inlinemarkup, parse_mode='HTML')
    else:
        bot.send_message(message.chat.id, '–°—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±–æ–ª—å—à–µ 0. –°–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        bot.register_next_step_handler(message, get_money)


@bot.callback_query_handler(func=lambda call: True)
def sel(call):
    global money
    target = call.data
    try:
        result = convert_uah_to(target, money)
        if result is not None:
            bot.send_message(call.message.chat.id, f'–ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–∞ —Å—É–º–∞: {result} {target}')
            q = {"amount": money, "from": "UAH", "to": target, "result": result}
        else:
            bot.send_message(call.message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã.')
    except Exception as e:
        bot.send_message(call.message.chat.id, f'–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}')

if __name__ == '__main__':
    bot.infinity_polling()
